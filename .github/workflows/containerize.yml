name: Containerize

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:

jobs:
  docr:
    name: Build and Publish to AWS Container Registry
    runs-on: [ "self-hosted", "linux", "x64" ]
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2

      - name: Provide name from Cargo.toml
        id: package_name
        uses: SebRollen/toml-action@v1.0.0
        with:
          file: "Cargo.toml"
          field: "package.name"

      - name: Provide version from Cargo.toml
        id: package_version
        uses: SebRollen/toml-action@v1.0.0
        with:
          file: "Cargo.toml"
          field: "package.version"

      - name: prepare variables
        run: |
          echo "package_name=${{ steps.package_name.outputs.value }}" >> $GITHUB_ENV
          echo "package_version=${{ steps.package_version.outputs.value }}" >> $GITHUB_ENV
          echo "current_branch=$(git branch --show-current)" >> $GITHUB_ENV

      - id: variable_test
        run: echo '::set-output name=SELECTED_COLOR::green'

      - name: print out variables
        run: |
          echo "package_name: ${{ env.package_name }}"
          echo "package_version ${{ env.package_version }}"
          echo "current_branch ${{ env.current_branch }}"

      - name: Build container image
        run: |
          docker build --tag ${{ env.package_name }}:${{ github.sha }} .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.package_name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag ${{ env.package_name }}:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.package_name }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.package_name }}
          cluster: ${{ env.package_name }}
          wait-for-service-stability: true
